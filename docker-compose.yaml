version: '3'
services:
  customer_db:
        image: postgres
        restart: always
        volumes:
            - ./migrations/000001_init_schema.up.sql:/docker-entrypoint-initdb.d/000001_init_schema.up.sql
            - ./postgres-data:/var/lib/postgresql/data
        environment:
            - POSTGRES_USER=${PG_USER}
            - POSTGRES_PASSWORD=${PG_PWD}
            - POSTGRES_DB=${PG_DATABASE}
        ports:
            - "5432:5432"
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_PWD}" ]
            interval: 30s
            timeout: 10s
            retries: 5
        networks:
            - mediasoft-task

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - mediasoft-task

  kafka:
    image: confluentinc/cp-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - 9092:9092
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:9092 --list
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - mediasoft-task


  customer:
        build:
            context: .
            dockerfile: Dockerfile
        image: mediasoft-customer
        env_file:
          - .env
        depends_on:
          customer_db:
              condition: service_healthy
          kafka:
              condition: service_healthy
        ports:
            - "8000:8000"
            - "8001:8001"
        networks:
          - mediasoft-task

networks:
  mediasoft-task:
    external: true