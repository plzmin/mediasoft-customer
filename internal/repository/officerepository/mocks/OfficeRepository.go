// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"
	model "mediasoft-customer/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// OfficeRepository is an autogenerated mock type for the OfficeRepository type
type OfficeRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, office
func (_m *OfficeRepository) Create(ctx context.Context, office *model.Office) error {
	ret := _m.Called(ctx, office)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Office) error); ok {
		r0 = rf(ctx, office)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx
func (_m *OfficeRepository) List(ctx context.Context) ([]*model.Office, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Office
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.Office, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Office); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Office)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOfficeRepository creates a new instance of OfficeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOfficeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OfficeRepository {
	mock := &OfficeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
